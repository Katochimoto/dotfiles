# Unix
if [[ $PLATFORM == 'Linux' ]]; then
# --group-directories-first
    alias ll='ls -lh --color=auto'
    alias lla='ls -lAh --color=auto'
    alias l='ls -1 --color=auto'
else
    alias ll='ls -lhG'
    alias lla='ls -lAhG'
    alias l='ls -1G'
fi
alias md='mkdir -p'
alias s='cd ..'
alias ss='cd ..; cd ..'
alias sss='cd ..; cd ..; cd ..'

alias m='make'

# Vim
alias v='vim -p'
alias sv='sudo vim -p'

# Git
alias gc='git commit'
alias gap='git add -p'
alias gr='git grep'
alias gcl='git clone'

function grf() {
    gr $* | awk -F ':' '{print $1}' | sort | uniq
}

# Commit pending changes and quote all args as message
function gg() {
    git commit -avm "$*"
}
alias gco='git checkout'
alias gb='git branch'
alias gd='git diff'
alias gdw='gd --word-diff'
alias gl='git log --graph --abbrev-commit --date-order --pretty=format:"%C(yellow)%h%Creset -%C(yellow)%d%Creset %s %C(dim cyan)(%cr) %C(dim white)%an%Creset"'
alias gl1='gl -n1'
alias glmy='gl --author "`git config user.email`"'
alias glmy1='glmy -n1'
alias gu='git pull --rebase'
alias gus='git pull --rebase ; git submodule update --init'
alias gsu='git submodule update --init'
alias up='git stash; gus; git stash pop'
alias gp='git push'
alias g='git status --short --branch'
alias gsh='git show'

# open git status m-files in vim
alias vg='vim -p `git ls-files -m`'

# open files found by git grep
function vgr(){
    fnp1=${2:-"*"}
    fnp2=${3:-"*"}
    vim -p +/$1 `git grep "$1" | awk -F ':' '{print $1}' | sort | uniq -c | sort -rn | awk '{print $2}' | grep -E "$fnp1" | grep -E "$fnp2"`
}

# open files changed by commit
function vgl(){
    hash=${1:-`glmy -1 --no-color --pretty=oneline | awk '{print $2}'`}
    vim -p `git show --name-only --pretty=oneline "$hash" | tail -n+2`
}

function vgb(){
    branch=${1:-`git symbolic-ref HEAD 2>/dev/null | sed  's|refs/heads/||'`}
    vim -p `git log --oneline --name-only --graph "master..$branch" | grep -v '*' | sort | uniq`
}


function vf(){
    vim -p `find -name "*$1*"`
}

function npublish() {
    git commit -am "$1" && git push && git tag "$1" && git push --tags && npm publish
}

vcprompt ()
{
    local b="$(git symbolic-ref HEAD 2>/dev/null)";
    if [ -n "$b" ]; then
        local branch=${b##refs/heads/};

        if [ "$branch" = "master" ]; then
            printf "%s " "m";
        else
            printf "%s " $branch;
        fi
    fi
}

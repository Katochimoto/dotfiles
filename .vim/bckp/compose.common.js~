/*global Daria, Page, hFolders, hMessages, hMessage, hMessageBody, hSettings, hAccountInformation, hAbookContacts, hAbookLetters, bFolders */

/**
 * Общие методы используемые композом и квикреплаем.
 * Эти методы копируются (с помощью Daria.augment) в Block.Compose.prototype и Daria.QuickReply.
 */

Daria.Compose = {

/**
 * Подготавливает список контактов перед вставкой в поля To, Cc или Bcc.
 * Добавляет в конец списка запятую и пробел, чтобы можно было сразу вводить следующий контакт.
 */
prepareContacts: function(value) {
    value = $.trim(value);
    if (!value) { return ''; }
    if (value.charAt(value.length - 1) !== ',') { value += ','; }
    value += ' ';
    return value;
},

/** Подчищает тему письма - удаляет лишние Re: и Fwd: */
cleanSubject: function(value) {
    return value.replace(/^(Re|Fwd):\s*/i, '');
},

/** Возвращает HTML тела письма в виде строки. */
getMsgBody: function(id) {
    var body = Daria.simpleTransform({ "compose-body": {config: Daria.Config.XSL} }, [ "message", "message-body" ], { ids: id });
    return $(body).html(); // Избавляемся от dummy div
},

/**
 * Возвращает параметры для заполнения поля from при отправке письма.
 * Имя отправителя, адрес по умолчанию, список всех доступных адресов.
 */
getFrom: function() {
    return {
        name: hSettings.getSetting('from_name'),
        email: hSettings.getSetting('default_email'),
        emails: $.merge($.merge([], hAccountInformation.getEmails()), hSettings.getValidatedEmails())
    };
},

/* ------------------------------------------------------------------------------------------------------------- */

/** Draft */

getDraftParams: function(id, mode) {
    mode = mode || hMessageBody.getSubtype(id);

    return {
        mode: mode,
        id: id,
        //ign_overwrite: 'no',
        from: {
            name: hMessage.getFromName(id),
            email: hMessage.getFromEmail(id),
            emails: $.merge($.merge([], hAccountInformation.getEmails()), hSettings.getValidatedEmails())
        },
        to: hMessage.getAddressField(id, "to"),
        cc: hMessageBody.getAddressField(id, "cc"),
        bcc: hMessageBody.getAddressField(id, "bcc"),
        subject: hMessage.getSubject(id),
        body: this.getDraftBody(id, mode),
        inreplyto: hMessageBody.getInReplyTo(id),
        references: hMessageBody.getReferences(id)
    };
},

getDraftBody: function(id, mode) {
    var body = Daria.simpleTransform({ "draft-body": {config: Daria.Config.XSL} }, [ "message", "message-body" ], { ids: id });
    body = $(body).html(); // Избавляемся от dummy div

    if (mode === 'plain') {
        body = Daria.Html2Text.html2text(body);
        body = Daria.deentityify(body);
    }

    return body;
},

/* ------------------------------------------------------------------------------------------------------------- */

/** Reply */

getReplyParams: function(id, mode, isAll) {
    mode = mode || hMessageBody.getSubtype(id);

    var to = hMessageBody.getAddressField(id, "reply-to", true) || hMessage.getAddressField(id, "from", true);
    var cc = '';

    if (to) {
        if (isAll) {
            cc = hMessage.getAddressField(id, "to", true); // Третий параметр true - исключаем собственные адреса пользователя
            if (cc) { cc += ', '; }
            cc += hMessageBody.getAddressField(id, "cc", true);
        }
    } else {
        // DARIA-748 - При ответе на своё же письмо в поле "Кому" подставлять адресата из письма, на которое отвечаешь
        to = hMessage.getAddressField(id, "to");
        if (isAll) {
            cc = hMessageBody.getAddressField(id, "cc");
        }
    }

    var messageId = hMessageBody.getMessageId(id);
    var references = hMessageBody.getReferences(id);
    var inreplyto = hMessageBody.getInReplyTo(id);

    return {
        mode: mode,
        overwrite: id,
        ign_overwrite: 'yes',
        from: this.getFrom(),
        to: to,
        cc: cc,
        bcc: '',
        subject: 'Re: ' + this.cleanSubject(hMessage.getSubject(id)),
        body: this.getReplyBody(id, mode),
        inreplyto: messageId,
        references: $.trim((references || inreplyto) + ' ' + messageId),
        mark_as: 'replied',
        mark_ids: id,
        current_folder: hMessage.getFolderId(id) // Id папки в которой лежит исходное письмо
    };
},

getReplyBody: function(id, mode) {
    var result = '';

    if (hSettings.isSet('enable_quoting')) { // Если есть настройка "Цитировать исходное письмо при ответе"

        var date = hMessage.getDateTime(id);
        var from = hMessage.getAddressField(id, 'from');

        var body = this.getMsgBody(id);
        body = Daria.Html2Text.quoteHtml(body); // Квотируем

        if (mode === 'html') {
            result += '<div><br/></div><div><br/></div><div>' + date + ', ' + Daria.entityify(from) + ':</div>';
            result += body;
        } else {
            result += '\n\n' + date + ', ' + from + ':\n';
            result += Daria.Html2Text.html2text(body); // Конвертим в plain text
        }
    }

    result += this.getSignature(mode);

    return result;
},

/* ------------------------------------------------------------------------------------------------------------- */

/** Forward */

getForwardParams: function(id, mode) {
    mode = mode || hMessageBody.getSubtype(id);

    return {
        mode: mode,
        overwrite: id,
        ign_overwrite: 'yes',
        from: this.getFrom(),
        to: '',
        cc: '',
        bcc: '',
        subject: 'Fwd: ' + this.cleanSubject(hMessage.getSubject(id)),
        body: this.getForwardBody(id, mode),
        inreplyto: '',
        references: '',
        mark_as: 'forwarded',
        mark_ids: id,
        current_folder: hMessage.getFolderId(id) // Id папки в которой лежит исходное письмо
    };
},

getForwardBody: function(id, mode) {
    var result = '';

    var date = hMessage.getDateTime(id);
    var from = hMessage.getAddressField(id, 'from');

    var body = this.getMsgBody(id);
    body = '<div class="normalize">' + body + '</div>';

    if (mode === 'html') {
        result += '<div><br/></div><div><br/></div><div>-------- Пересылаемое сообщение --------</div>';
        result += '<div>' + date + ', ' + Daria.entityify(from) + ':</div><div><br/></div>';
        result += body;
        result += '<div><br/></div><div>-------- Завершение пересылаемого сообщения --------</div>';
    } else {
        result += '\n\n-------- Пересылаемое сообщение --------';
        result += '\n' + date + ', ' + from + ':\n\n';
        result += Daria.Html2Text.html2text(body); // Конвертим в plain text
        result += '\n-------- Завершение пересылаемого сообщения --------';
    }

    return result;
},

/* ------------------------------------------------------------------------------------------------------------- */

/** Multiple forward */

getMultipleForwardParams: function(id) {
    var mode = hSettings.isSet('enable_richedit') ? 'html' : 'plain';
    var signature = this.getSignature(mode);

    return {
        from: this.getFrom(),
        mode: mode,
        ign_overwrite: 'no',
        mark_as: 'forwarded',
        mark_ids: id.join(','),
        body: signature ? (mode === 'html' ? '<div><br/></div>' : '') + signature : ''
    };
},

/* ------------------------------------------------------------------------------------------------------------- */

/** New empty message */

getEmptyParams: function() {
    var mode = hSettings.isSet('enable_richedit') ? 'html' : 'plain';
    var signature = this.getSignature(mode);

    return {
        from: this.getFrom(),
        mode: mode,
        ign_overwrite: 'no',
        body: signature ? (mode === 'html' ? '<div><br/></div>' : '') + signature : ''
    };
},

/* ------------------------------------------------------------------------------------------------------------- */

/** Возвращает подпись подготовленную для вставки в тело письма */
getSignature: function(mode) {
    var signature = hSettings.getSetting('signature');
    if (!signature) { return ''; }
    return (mode === 'html') ? '<div><br/></div><div>--</div>' + Daria.Html2Text.text2html(signature) : '\n\n--\n' + signature;
},

/* ------------------------------------------------------------------------------------------------------------- */

startSending: function() {
    this.isSending = true;

    Daria.loader.start();

    Daria.Statusline.showMsg({
        name: 'message-sending',
        hideOnTimeout: false,
        body: 'Письмо отправляется…'
    });

    this.$form.find('.b-mail-button_send').attr('disabled', 'disabled'); // Дизейблим кнопку "Отправить"
},

stopSending: function() {
    this.isSending = false;
    Daria.loader.stop();
    Daria.Statusline.hide('message-sending');
    this.$form.find('.b-mail-button_send').removeAttr('disabled'); // Раздизейбливаем кнопку
},

/** Делаем необходимые обновления после отправки письма */
updateAfterSend: function() {
    hMessages.clearCacheByFolder(hFolders.ids.sent);

    // Обновляем счетчик, если стоит настройка "сохранять отправленные"
    if (hSettings.isSet('save_sent')) {
        bFolders.updateFolderCounts(hFolders.ids.sent, {count: 1});
    }

    // Если письмо было ранее сохранено в черновики
    if (this.isSaved) {
        hMessages.clearCacheByFolder(hFolders.ids.draft);
        bFolders.updateFolderCounts(hFolders.ids.draft, {count: -1});
    }

    // Очищаем все кеши контактов, поскольку при отправке письма в АК может добавиться новый контакт
    hAbookContacts.clearCache();
    hAbookLetters.clearCache();
    Daria.EmailsAutocompleter.flushCache();
},

onSent: function(id) {
    var pageAfterSend = hSettings.getSetting('page_after_send');

    if (pageAfterSend === 'done' && id) {
        Page.go('#done/' + id);
    } else if (pageAfterSend === 'sent_list'){ 
        Page.go('#sent');
        Daria.Statusline.showMsg({body: "Письмо успешно отправлено."});
    } else if (pageAfterSend === 'current_list') {
        var prev = Page.History.prev(); // Достаем предыдущую страницу.
        if (prev && prev.params._page == "messages") { // Это список писем.
            Page.go(prev.url);
        } else {
            Page.go('#inbox');
        }
        Daria.Statusline.showMsg({body: "Письмо успешно отправлено."});
    }
},

handleSendSuccess: function(data) {
    this.stopSending();

    var mail_send = Daria.XML.select(data, "/handlers/handler[@name = 'do-send']/mail_send");

    if (!mail_send) {
        this.handleError('no_data');
        Daria.ErrorLog.send({errorType: "SendErrorNoData", handlerData: this.getHandlerData(data)});
        return false;
    }

    var status = Daria.nodeValue(mail_send, "status");
    var id = Daria.nodeValue(mail_send, "storedmid");

    if (status === "ok") {

        if (this.current_folder) {
            hMessages.clearCacheByFolder(this.current_folder);
        }

        this.markChangesSaved(); // Чтобы после отправки письма не было попапа "are you sure?"
        this.updateAfterSend();
        this.onSent(id);

    } else if (status === 'captcha_request') {

        var captchaKey = Daria.nodeValue(mail_send, "captcha_key");

        this.showCaptcha(captchaKey);
        this.markChangesSaved();
        this.updateAfterSave(); // При запросе капчи письмо сохраняется в черновики

        if (id) {
            this.setId(id); // Запоминаем id сохраненного письма в форме
            if (Page.type === 'compose') {
                Daria.hashReplace("#compose/" + id); // Обновляем id в урле (без добавления в history)
            }
        }

    } else {

        this.handleError(status);
        Daria.ErrorLog.send({errorType: "SendError", status: status});

    }
},

handleSendError: function(status) {
    // TODO: обработать эту ситуацию
    this.stopSending();
    Daria.ErrorLog.send({errorType: "SendErrorAjax", status: status});
},

/* ------------------------------------------------------------------------------------------------------------- */

startSaving: function() {
    this.isSaving = true;

    this.$form.find('.b-mail-button_save').attr('disabled', 'disabled'); // Дизейблим кнопку "Сохранить как черновик"

    this.$form.find('.b-compose-message__actions__helper')
        .removeClass('b-compose-message__actions__helper_saved')
        .addClass('b-compose-message__actions__helper_saving');
},

stopSaving: function() {
    this.isSaving = false;
    this.$form.find('.b-mail-button_save').removeAttr('disabled'); // Раздизейбливаем кнопку
    this.$form.find('.b-compose-message__actions__helper').removeClass('b-compose-message__actions__helper_saving');
},

/** Делаем необходимые обновления после сохранения письма */
updateAfterSave: function() {
    // Сбрасываем кеш черновиков
    hMessages.clearCacheByFolder(hFolders.ids.draft);
    // Если письмо не было ранее сохранено, обновляем счетчик количества писем
    if (!this.isSaved) { bFolders.updateFolderCounts(hFolders.ids.draft, {count: 1}); }
},

onSaved: function() {
    this.$form.find('.b-compose-message__actions__helper').addClass('b-compose-message__actions__helper_saved');

    var date = new Date();

    var hours = date.getHours();
    hours = hours < 10 ? '0' + hours : hours.toString();

    var minutes = date.getMinutes();
    minutes = minutes < 10 ? '0' + minutes : minutes.toString();

    var time = hours + ':' + minutes;

    this.$form.find('.b-compose-message__actions__helper__date').html('сохранено в ' + time);
},

handleSaveSuccess: function(data, callback) {
    this.stopSaving();

    var mail_send = Daria.XML.select(data, "/handlers/handler[@name = 'do-send']/mail_send");

    if (!mail_send) {
        //this.handleError('no_data');
        Daria.ErrorLog.send({errorType: "SaveErrorNoData", handlerData: this.getHandlerData(data)});
        return false;
    }

    var status = Daria.nodeValue(mail_send, "status");

    if (status === "ok") {

        this.markChangesSaved();
        this.updateAfterSave();
        this.onSaved();

        var id = Daria.nodeValue(mail_send, "storedmid");

        if (id) {
            this.setId(id); // Запоминаем id сохраненного письма в форме
            if (Page.type === 'compose') {
                Daria.hashReplace("#compose/" + id); // Обновляем id в урле (без добавления в history)
            }
            if ($.isFunction(callback)) {
                callback(id);
            }
        }

        this.setAutoSaveTimeout(); // Заводим таймер следующего автосохранения

    } else {

        //this.handleError(status);
        Daria.ErrorLog.send({errorType: "SaveError", status: status});

    }
},

handleSaveError: function(status) {
    // TODO: обработать эту ситуацию
    this.stopSaving();
    Daria.ErrorLog.send({errorType: "SaveErrorAjax", status: status});
},

/* ------------------------------------------------------------------------------------------------------------- */

/** Обработчик ошибок отправки и сохранения писем */
handleError: function(status) {
    if (!status) { return false; } // TODO: обработать эту ситуацию

    // FIXME: вынести сообщения в файлы локализации, пофиксить тексты сообщений
    var errors = {
        compose_check_failed: 'Неверное значение compose_check.',
        virus_found: 'Сообщение не&#160;может быть отослано&#160;&#8212; обнаружен вирус.',
        strongspam_found: 'Сообщение не&#160;может быть отослано&#160;&#8212; обнаружен спам.',
        incorrect_to: 'Некорректное поле To.',
        incorrect_cc: 'Некорректное поле Сс.',
        incorrect_bcc: 'Некорректное поле Bcc.',
        msg_too_big: 'Сообщение не&#160;может быть отправлено и&#160;сохранено. Превышен максимальный размер письма.',
        no_recipients: 'Нет получателей.',
        fail_limit: 'Слишком большой размер письма.',
        too_many_emails: 'Превышен лимит писем на день.',
        too_many_letters: 'Нельзя отправить письмо более чем 25&#160;адресатам одновременно.',
        no_data: 'Произошла ошибка при передаче данных на&#160;сервер.'
    };

    var msg = errors[status] || status;

    Daria.Libs("Daria.Dialog", function() {
        Daria.Dialog.notice({
            title: 'Произошла ошибка',
            body: '<p>' + msg + '</p>'
        });
    });
},

/* ------------------------------------------------------------------------------------------------------------- */

getHandlerData: function(data) {
    var handler = Daria.XML.select(data, "/handlers/handler[@name = 'do-send']");

    if (!handler) {
        return 'No handler';
    }

    try {
        return Daria.XML.xml2string(handler);
    } catch (e) {
        return 'Invalid XML';
    }
},

/* ------------------------------------------------------------------------------------------------------------- */

/** Показывает попап с капчей */
showCaptcha: function(captchaKey) {
    var dialog = Daria.simpleTransform({ "captcha-request": { "captcha-key": captchaKey } });
    var $dialog = $(dialog);
    var $captchaInput = $dialog.find('.b-captcha__input__letters');
    var $captchaSubmit = $dialog.find('.b-captcha__input__submit');

    var that = this;

    var processCaptcha = function() {
        var captchaEntered = $captchaInput.attr('value');
        captchaEntered = $.trim(captchaEntered);

        if (!captchaEntered) {
            $captchaInput.focus();
            return false;
        }

        Daria.Dialog.close();

        that.send({"captcha_key": captchaKey, "captcha_entered": captchaEntered});
    };

    $captchaInput.keyup(function(e) {
        if (e.keyCode === 13) {
            processCaptcha();
        }
    });

    $captchaSubmit.click(function() {
        processCaptcha();
    });

    Daria.Libs("Daria.Dialog", function() {
        Daria.Dialog.open({
            title: 'Внимание! Ваше письмо пока не&#160;отправлено',
            body: $dialog,
            width: 550,
            onopen: function() {
                $captchaInput.focus();
            }
        });
    });
},

/* ------------------------------------------------------------------------------------------------------------- */

/** При наличии в теле письма этих слов будет показано сообщение об отсутствии аттача. */
reAttsStopWords: new RegExp([
    'attach',
    'аттач',
    'приложил',
    'прикладываю',
    'прикрепляю',
    'приложенный',
    'приложенном',
    'вложил',
    'вложение',
    'вложенном',
    'вложенный',
    'вкладываю',
    'прилагаю',
    'см. файл',
    'см.файл',
    'лови файл',
    'прикрепил',
    'во вложении'
].join('|')),

checkAttsStopWords: function(params) {
    // Если есть приаттаченные файлы или пересылаемые письма, то все ок.
    if (Daria.Attachments.hasFiles() || Daria.Attachments.hasForwardedMessages()) { return true; }

    // Если аттачей нет, то нужно проверить тело письма на стоп-слова
    var body = this.getBody();

    var quotationChar = hSettings.getSetting('quotation_char') || '>'; // Символ цитирования
    quotationChar = quotationChar.replace(/([\^\$\(\)\[\]\{\}\*\.\+\?\|\\])/gi, "\\$1");

    // Не ищем стоп-слова в цитатах
    body = body.replace(new RegExp('(?:^\\s*' + quotationChar + '.*$)|(?:[\n\r])', 'gmi'), '');
    body = body.replace(/<blockquote[^>]*>.*<\/blockquote>/gi, '');

    if (!this.reAttsStopWords.test(body)) { return true; }

    var that = this;

    Daria.Libs("Daria.Dialog", function() {
        Daria.Dialog.confirm({
            body: '<p>Возможно, вы хотели отправить файл, однако прикрепленные файлы отсутствуют. Все равно отправить?</p>',
            width: 350,
            okValue: 'Отправить',
            okHandler: function() {
                that.startSending();
                that.doSend(params);
            },
            oncancel: function() {
                that.setAutoSaveTimeout();
            }
        });
    });

    return false;
}

};
